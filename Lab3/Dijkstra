import heapq

class Graph:
    def __init__(self):
        self.edges = {}
        self.vertices = set()

    def add_edge(self, u, v, weight):
        if u not in self.edges:
            self.edges[u] = []
        self.edges[u].append((v, weight))
        self.vertices.add(u)
        self.vertices.add(v)

    def dijkstra(self, start):
        # Initialize distances with infinity
        distances = {vertex: float('infinity') for vertex in self.vertices}
        distances[start] = 0

        # Priority queue to store vertices and their distances
        priority_queue = [(0, start)]

        while priority_queue:
            current_distance, current_vertex = heapq.heappop(priority_queue)

            # Nodes can only be processed once
            if current_distance > distances[current_vertex]:
                continue

            # Check neighbors
            for neighbor, weight in self.edges.get(current_vertex, []):
                distance = current_distance + weight

                # Only consider this new path if it's better
                if distance < distances[neighbor]:
                    distances[neighbor] = distance
                    heapq.heappush(priority_queue, (distance, neighbor))

        return distances

# Example usage
g = Graph()
g.add_edge('A', 'B', 1)
g.add_edge('A', 'C', 4)
g.add_edge('A', 'E', 7)
g.add_edge('B', 'C', 2)
g.add_edge('B', 'D', 5)
g.add_edge('B', 'E', 3)
g.add_edge('C', 'D', 1)
g.add_edge('C', 'F', 5)
g.add_edge('D', 'E', 2)
g.add_edge('D', 'F', 1)
g.add_edge('E', 'F', 2)
g.add_edge('F', 'G', 3)
g.add_edge('E', 'G', 4)

print("Shortest distances from vertex A:")
distances = g.dijkstra('A')
for vertex, distance in distances.items():
    print(f"Distance to {vertex}: {distance}")

"""
    A
  / | \
 B  C  E
 | \/  | \
 | /   |  \
 D---- F   G
  \   /
   \ /
    E
"""