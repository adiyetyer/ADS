from collections import deque

class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, u, v):
        if u not in self.graph:
            self.graph[u] = []
        self.graph[u].append(v)

    def bfs(self, start):
        visited = set()  # Set to keep track of visited nodes.
        queue = deque([start])  # Initialize a queue with the start node.

        while queue:
            node = queue.popleft()  # Dequeue a vertex from the queue.
            if node not in visited:
                print(node, end=" ")  # Print the dequeued vertex.
                visited.add(node)  # Mark the node as visited.

                # Enqueue all adjacent vertices that have not been visited.
                for neighbor in self.graph[node]:
                    if neighbor not in visited:
                        queue.append(neighbor)

# Example usage
g = Graph()
g.add_edge(0, 1)
g.add_edge(0, 2)
g.add_edge(1, 2)
g.add_edge(2, 0)
g.add_edge(2, 3)
g.add_edge(3, 3)

print("BFS starting from vertex 2:")
g.bfs(2)
